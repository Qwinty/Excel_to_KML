import logging
import multiprocessing
from concurrent.futures import ProcessPoolExecutor, as_completed
from pathlib import Path
from typing import Any, Dict, List

from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, BarColumn, TextColumn, TimeRemainingColumn, SpinnerColumn

from src.config import Config
from src.stats import ProcessingStats, display_processing_statistics
from src.ui import console, choose_file
from src.separator import split_excel_file_by_merges
from src.workers import initialize_worker_logging, process_file_worker


logger = logging.getLogger(__name__)


def process_mode_1_full_processing(config: Config) -> None:
    console.print(Panel(
        "[bold cyan]–†–µ–∂–∏–º: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ KML[/bold cyan]\n\n"
        "[dim]–≠—Ç–æ—Ç —Ä–µ–∂–∏–º –≤—ã–ø–æ–ª–Ω–∏—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n"
        "1. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º\n"
        "2. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –≤ KML[/dim]",
        title="üîÑ –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
        border_style="cyan"
    ))

    input_file = choose_file(config)
    if not input_file:
        return

    input_filename = Path(input_file).name

    processing_stats = ProcessingStats()

    # Stage 1: Separation
    separation_success = _process_file_separation(input_file, input_filename, processing_stats, config)

    # Stage 2: KML Conversion
    if separation_success:
        _process_kml_conversion(processing_stats, config)
        display_processing_statistics(processing_stats)


def _process_file_separation(input_file: str, input_filename: str, processing_stats: ProcessingStats, config: Config) -> bool:
    separation_success = False

    console.print("[cyan]üîÑ –≠—Ç–∞–ø 1: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º...[/cyan]")

    try:
        Path(config.xlsx_output_dir).mkdir(parents=True, exist_ok=True)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö XLSX: {config.xlsx_output_dir}")

        split_excel_file_by_merges(
            input_path=input_file,
            output_base_dir=config.xlsx_output_dir,
            header_rows_count=config.header_rows_count,
            merge_cols=config.merge_columns
        )

        separated_files = list(Path(config.xlsx_output_dir).rglob('*.xlsx'))
        processing_stats.regions_detected = len(separated_files)
        processing_stats.files_created = [str(f) for f in separated_files]

        separation_success = True

    except Exception as e:
        console.print(Panel(
            f"[bold red]–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è:[/bold red]\n{e}\n\n"
            "[dim]–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –æ—Ç–∫—Ä—ã—Ç –≤ Excel –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è.[/dim]",
            title="‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ 1",
            border_style="red"
        ))
        logger.exception(
            f"–û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ 1 (–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ) –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {input_file}")

    if separation_success:
        console.print(Panel(
            f"[bold green]‚úÖ –≠—Ç–∞–ø 1 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ[/bold green]\n\n"
            f"–§–∞–π–ª '[cyan]{input_filename}[/cyan]' —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω.\n"
            f"–†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ XLSX —Ñ–∞–π–ª—ã: [blue]{config.xlsx_output_dir}[/blue]",
            title="üéâ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
            border_style="green"
        ))

    return separation_success


def _process_kml_conversion(processing_stats: ProcessingStats, config: Config) -> None:
    console.print(Panel(
        "[bold cyan]–≠—Ç–∞–ø 2: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ KML[/bold cyan]\n\n"
        "[dim]–ü–æ–∏—Å–∫ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç KML...[/dim]",
        title="üîÑ –≠—Ç–∞–ø 2",
        border_style="cyan"
    ))

    separated_files = list(Path(config.xlsx_output_dir).rglob('*.xlsx'))

    if not separated_files:
        console.print(Panel(
            f"[yellow]–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ *.xlsx –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ KML –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{config.xlsx_output_dir}' –∏ –µ–µ –ø–æ–¥–ø–∞–ø–∫–∞—Ö.[/yellow]",
            title="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
            border_style="yellow"
        ))
        return

    console.print(f"[green]‚úì –ù–∞–π–¥–µ–Ω–æ {len(separated_files)} —Ñ–∞–π–ª–æ–≤ .xlsx –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.[/green]")

    Path(config.kml_output_dir).mkdir(parents=True, exist_ok=True)
    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è KML: {config.kml_output_dir}")

    conversion_errors = _run_parallel_conversion(separated_files, processing_stats, config)
    _report_conversion_results(separated_files, conversion_errors, config)


def _run_parallel_conversion(separated_files: List[Path], processing_stats: ProcessingStats, config: Config) -> int:
    conversion_errors = 0

    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        BarColumn(),
        TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
        TextColumn("({task.completed}/{task.total} —Ñ–∞–π–ª–æ–≤)"),
        TimeRemainingColumn(),
        console=console,
        transient=False
    ) as progress:
        task = progress.add_task("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ KML...", total=len(separated_files))

        worker_args = _prepare_worker_args(separated_files, config)
        max_workers = _determine_max_workers(separated_files, config)

        console.print(f"[dim]–ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å {max_workers} –ø–æ—Ç–æ–∫–∞–º–∏...[/dim]")
        console.print(f"[dim]DEBUG/WARNING —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏[/dim]")

        from src.workers import process_file_worker  # ensure correct import in subprocess on Windows

        with ProcessPoolExecutor(
            max_workers=max_workers,
            initializer=initialize_worker_logging
        ) as executor:
            future_to_file = {
                executor.submit(process_file_worker, **args): args['xlsx_file_path']
                for args in worker_args
            }

            for future in as_completed(future_to_file):
                file_path = future_to_file[future]
                filename = Path(file_path).name

                try:
                    success, processed_filename, conversion_result, error_message = future.result()

                    if success:
                        console.print(f"[dim]–ó–∞–≤–µ—Ä—à–µ–Ω–æ: [green]{processed_filename}[/green][/dim]")
                        if conversion_result is not None:
                            processing_stats.add_file_result(conversion_result)
                            if conversion_result.anomaly_file_created:
                                processing_stats.anomaly_files_generated += 1
                    else:
                        console.print(f"[dim]–û—à–∏–±–∫–∞: [red]{processed_filename}[/red][/dim]")
                        conversion_errors += 1
                        processing_stats.conversion_errors += 1
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {file_path} –≤ KML: {error_message}")

                except Exception as e:
                    console.print(f"[dim]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: [red]{filename}[/red][/dim]")
                    conversion_errors += 1
                    processing_stats.conversion_errors += 1
                    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}", exc_info=True)
                finally:
                    progress.advance(task)

    return conversion_errors


def _prepare_worker_args(separated_files: List[Path], config: Config) -> List[Dict[str, Any]]:
    worker_args: List[Dict[str, Any]] = []
    for xlsx_file_path in separated_files:
        relative_path = xlsx_file_path.relative_to(Path(config.xlsx_output_dir))
        kml_file_rel_path = relative_path.with_suffix('.kml')
        kml_file_abs_path = Path(config.kml_output_dir) / kml_file_rel_path

        worker_args.append({
            'xlsx_file_path': str(xlsx_file_path),
            'kml_file_path': str(kml_file_abs_path),
            'xlsx_output_dir': config.xlsx_output_dir,
            'kml_output_dir': config.kml_output_dir
        })
    return worker_args


def _determine_max_workers(separated_files: List[Path], config: Config) -> int:
    if config.max_parallel_workers is not None:
        return min(len(separated_files), config.max_parallel_workers)
    else:
        return min(len(separated_files), multiprocessing.cpu_count())


def _report_conversion_results(separated_files: List[Path], conversion_errors: int, config: Config) -> None:
    if conversion_errors == 0:
        console.print(Panel(
            f"[bold green]‚úÖ –≠—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ![/bold green]\n\n"
            f"–í—Å–µ {len(separated_files)} —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ KML.\n"
            f"KML —Ñ–∞–π–ª—ã: [blue]{config.kml_output_dir}[/blue]",
            title="üéâ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
            border_style="green"
        ))
    else:
        successful_files = len(separated_files) - conversion_errors

        log_file_path = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        logger_root = logging.getLogger()
        if logger_root.handlers:
            for handler in logger_root.handlers:
                if hasattr(handler, 'baseFilename'):
                    log_file_path = str(getattr(handler, 'baseFilename', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'))
                    break

        console.print(Panel(
            f"[bold yellow]‚ö†Ô∏è –≠—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏[/bold yellow]\n\n"
            f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ: [green]{successful_files}[/green] —Ñ–∞–π–ª–æ–≤\n"
            f"–û—à–∏–±–æ–∫: [red]{conversion_errors}[/red]\n\n"
            f"KML —Ñ–∞–π–ª—ã: [blue]{config.kml_output_dir}[/blue]\n"
            f"–õ–æ–≥-—Ñ–∞–π–ª: [dim]{log_file_path}[/dim]",
            title="‚ö†Ô∏è –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏",
            border_style="yellow"
        ))


def process_mode_2_single_file(config: Config) -> None:
    console.print(Panel(
        "[bold cyan]–†–µ–∂–∏–º: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ .xlsx –≤ .kml[/bold cyan]\n\n"
        "[dim]–ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ Excel –≤ —Ñ–æ—Ä–º–∞—Ç KML\n"
        "–±–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º.[/dim]",
        title="üöÄ –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
        border_style="cyan"
    ))

    file_name = choose_file(config)
    if not file_name:
        return

    input_path = Path(file_name)
    Path(config.single_kml_output_dir).mkdir(parents=True, exist_ok=True)
    output_filename = Path(config.single_kml_output_dir) / f"{input_path.stem}.kml"

    from rich.table import Table

    info_table = Table(show_header=False, box=None)
    info_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="bold", width=20)
    info_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
    info_table.add_row("–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª:", input_path.name)
    info_table.add_row("–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª:", str(output_filename))

    console.print(Panel(info_table, title="‚ÑπÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", border_style="blue"))

    from openpyxl import load_workbook
    from src.xlsx_to_kml import create_kml_from_coordinates
    from src.stats import ProcessingStats, display_processing_statistics

    try:
        single_stats = ProcessingStats()
        single_stats.regions_detected = 1

        with console.status("[cyan]–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ KML...[/cyan]", spinner="dots"):
            workbook = load_workbook(filename=str(input_path), data_only=True)
            conversion_result = create_kml_from_coordinates(
                workbook.active,
                output_file=str(output_filename),
                filename=input_path.name
            )

            single_stats.add_file_result(conversion_result)
            if conversion_result.anomaly_file_created:
                single_stats.anomaly_files_generated += 1

        success_msg = f"[bold green]‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ![/bold green]\n\n"
        success_msg += f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: [cyan]{input_path.name}[/cyan]\n"
        success_msg += f"–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: [blue]{output_filename}[/blue]"

        if conversion_result.anomaly_file_created:
            success_msg += f"\n\n[yellow]üìä –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏[/yellow]"

        console.print(Panel(success_msg, title="üéâ –ì–æ—Ç–æ–≤–æ", border_style="green"))

        display_processing_statistics(single_stats)

    except Exception as e:
        console.print(Panel(
            f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:[/bold red]\n{e}\n\n"
            "[dim]–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.[/dim]",
            title="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
            border_style="red"
        ))
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ 2 –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_name}")


