import logging
from typing import Any, List, Optional, Tuple

from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt
from rich.table import Table

from src.utils import setup_logging
from src.xlsx_to_kml import parse_coordinates, process_coordinates, create_transformer


console = Console()
logger = logging.getLogger(__name__)


def _setup_debug_logging():
    root_logger = logging.getLogger()
    console_handler = None
    original_console_level = None

    for handler in root_logger.handlers:
        if isinstance(handler, logging.StreamHandler):
            console_handler = handler
            original_console_level = handler.level
            handler.setLevel(logging.DEBUG)
            logger.debug("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω DEBUG —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏")
            break

    return console_handler, original_console_level


def _cleanup_debug_logging(console_handler: Optional[logging.Handler], original_console_level: Optional[int]):
    if console_handler and original_console_level is not None:
        logger.debug(
            f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏: {logging.getLevelName(original_console_level)}")
        console_handler.setLevel(original_console_level)


def _get_debug_mode_choice() -> str:
    mode_table = Table(title="–†–µ–∂–∏–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞", show_header=False, box=None)
    mode_table.add_column("‚Ññ", style="bold cyan", width=3)
    mode_table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")

    mode_table.add_row("1", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ)")
    mode_table.add_row("2", "–í–≤–µ—Å—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é proj4 —Å—Ç—Ä–æ–∫—É")
    mode_table.add_row("3", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    console.print(mode_table)

    try:
        return Prompt.ask(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞",
            choices=["1", "2", "3"],
            show_choices=False
        )
    except (KeyboardInterrupt, EOFError):
        console.print("\n[yellow]–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.[/yellow]")
        return "3"


def _get_custom_proj4_transformer() -> Tuple[Optional[Any], Optional[str]]:
    console.print(Panel(
        "[bold cyan]–í–≤–æ–¥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π proj4 —Å—Ç—Ä–æ–∫–∏[/bold cyan]\n\n"
        "–í–≤–µ–¥–∏—Ç–µ proj4 —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ú–°–ö.\n\n"
        "[dim]–ü—Ä–∏–º–µ—Ä:[/dim]\n"
        "[yellow]+proj=tmerc +lat_0=0 +lon_0=130.71666666667 +k=1 +x_0=4300000 +y_0=-16586.442 +ellps=krass +units=m +no_defs[/yellow]",
        title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ proj4",
        border_style="cyan"
    ))

    while True:
        try:
            custom_proj4 = Prompt.ask(
                "\n[bold]Proj4 —Å—Ç—Ä–æ–∫–∞[/bold]",
                default="",
                show_default=False
            ).strip()

            if not custom_proj4:
                console.print("[yellow]–í–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.[/yellow]")
                continue

            if custom_proj4.lower() in ["back", "–Ω–∞–∑–∞–¥"]:
                return None, None

            if not custom_proj4.startswith('+proj'):
                console.print(
                    "[yellow]Proj4 —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '+proj'.[/yellow]")
                continue

            selected_transformer = create_transformer(custom_proj4)
            selected_proj4_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è proj4"

            display_proj4 = custom_proj4[:60] + "..." if len(custom_proj4) > 60 else custom_proj4
            console.print(
                f"[green]‚úì Proj4 —Å—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:[/green] [dim]{display_proj4}[/dim]")
            return selected_transformer, selected_proj4_name

        except (KeyboardInterrupt, EOFError):
            console.print("\n[yellow]–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.[/yellow]")
            return None, None
        except Exception as e:
            console.print(Panel(
                f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ proj4 —Å—Ç—Ä–æ–∫–∏:[/bold red]\n{e}\n\n"
                "[yellow]–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é proj4 —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 'back' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.[/yellow]",
                title="–û—à–∏–±–∫–∞",
                border_style="red"
            ))
            continue


def _parse_coordinate_string(input_string: str, mode_choice: str, selected_transformer: Optional[Any]):
    logger.info(f"--- –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: '{input_string}' ---")

    if mode_choice == "1":
        return parse_coordinates(input_string)
    elif mode_choice == "2":
        if (' –º.' in input_string or ', –º.' in input_string or input_string.endswith('–º.')) and '¬∞' not in input_string:
            return process_coordinates(input_string, selected_transformer)
        else:
            return parse_coordinates(input_string)

    return None, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞"


def _display_parsing_results(coords, reason):
    if reason:
        console.print(Panel(
            f"[bold red]–û—à–∏–±–∫–∞:[/bold red] {reason}",
            title="‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞",
            border_style="red"
        ))
    elif not coords:
        console.print(Panel(
            "[yellow]–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —è–≤–ª—è—é—Ç—Å—è –Ω—É–ª–µ–≤—ã–º–∏.[/yellow]",
            title="‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞",
            border_style="yellow"
        ))
    else:
        result_table = Table(title=f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(coords)} –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç", show_header=True, header_style="bold green")
        result_table.add_column("‚Ññ", style="dim", width=3, justify="center")
        result_table.add_column("–ò–º—è", style="cyan")
        result_table.add_column("–î–æ–ª–≥–æ—Ç–∞", style="green", justify="right")
        result_table.add_column("–®–∏—Ä–æ—Ç–∞", style="green", justify="right")

        for i, (name, lon, lat) in enumerate(coords, 1):
            result_table.add_row(str(i), name, f"{lon:.6f}", f"{lat:.6f}")

        console.print(result_table)
        console.print("\n[bold blue]üìç –§–æ—Ä–º–∞—Ç –¥–ª—è Geobridge:[/bold blue]")
        for name, lon, lat in coords:
            console.print(f"{lat}, {lon}")

    console.print()


def _run_coordinate_parsing_loop(mode_choice: str, selected_transformer, selected_proj4_name):
    mode_text = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π' if mode_choice == '1' else f'–†—É—á–Ω–æ–π ({selected_proj4_name})'

    console.print(Panel(
        f"[bold green]–†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞: {mode_text}[/bold green]\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.\n"
        "[dim]–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –≤–≤–µ–¥–∏—Ç–µ 'back' –∏–ª–∏ '–Ω–∞–∑–∞–¥'.[/dim]",
        title="üîç –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç",
        border_style="green"
    ))

    while True:
        try:
            input_string = Prompt.ask("[bold cyan]–°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞[/bold cyan]")

            if input_string.lower() in ["back", "–Ω–∞–∑–∞–¥"]:
                break

            if not input_string.strip():
                continue

            coords, reason = _parse_coordinate_string(input_string, mode_choice, selected_transformer)
            _display_parsing_results(coords, reason)

        except (KeyboardInterrupt, EOFError):
            console.print("\n[yellow]–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.[/yellow]")
            break


def debug_coordinate_parser() -> None:
    console.print(Panel(
        "[bold magenta]–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç[/bold magenta]\n"
        "[dim]–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö proj4 —Å–∏—Å—Ç–µ–º[/dim]",
        title="üîß –û—Ç–ª–∞–¥–∫–∞",
        border_style="magenta"
    ))

    console_handler, original_console_level = _setup_debug_logging()

    try:
        while True:
            mode_choice = _get_debug_mode_choice()

            if mode_choice == "3":
                break

            selected_transformer = None
            selected_proj4_name = None

            if mode_choice == "2":
                selected_transformer, selected_proj4_name = _get_custom_proj4_transformer()
                if not selected_transformer:
                    continue

            _run_coordinate_parsing_loop(mode_choice, selected_transformer, selected_proj4_name)

    except (KeyboardInterrupt, EOFError):
        console.print("\n[yellow]–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.[/yellow]")
    finally:
        _cleanup_debug_logging(console_handler, original_console_level)


