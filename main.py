import glob
import os
import logging
from dataclasses import dataclass
from pathlib import Path
from typing import Optional, List

from openpyxl import load_workbook
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.prompt import Prompt, Confirm, IntPrompt
from rich.progress import Progress, BarColumn, TextColumn, TimeRemainingColumn, SpinnerColumn
from rich.text import Text
from rich import traceback

from xlsx_to_kml import create_kml_from_coordinates, parse_coordinates, process_coordinates, transformers, create_transformer
from separator import split_excel_file_by_merges
from utils import setup_logging

# Set up rich traceback for better error display
traceback.install(show_locals=True)

# Set up logging and console
logger = setup_logging()
console = Console()

# --- Configuration ---
@dataclass
class Config:
    """Application configuration."""
    input_dir: str = "input"
    xlsx_output_dir: str = "output/xlsx"
    kml_output_dir: str = "output/kml"
    single_kml_output_dir: str = "output/kml_single"
    header_rows_count: int = 5
    merge_columns: tuple = (1, 7)  # Columns A-G

# Global config instance
config = Config()


def choose_file() -> Optional[str]:
    """Prompt user to choose an Excel file from the input directory using Rich interface."""
    input_dir = Path(config.input_dir)
    
    # Create input directory if it doesn't exist
    if not input_dir.exists():
        input_dir.mkdir(parents=True, exist_ok=True)
        console.print(Panel(
            f"[yellow]–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ '{input_dir}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–µ—Å—Ç–∏—Ç–µ Excel —Ñ–∞–π–ª—ã –≤ –Ω–µ–µ.[/yellow]",
            title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            border_style="yellow"
        ))
        return None

    # Find Excel files
    files = list(input_dir.glob("*.xlsx"))

    if not files:
        console.print(Panel(
            f"[bold red]–§–∞–π–ª—ã Excel (.xlsx) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ '{input_dir}'.[/bold red]",
            title="–û—à–∏–±–∫–∞",
            border_style="red"
        ))
        return None

    # Create table with file information
    table = Table(title="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã Excel", show_header=True, header_style="bold cyan")
    table.add_column("‚Ññ", style="dim", width=4, justify="center")
    table.add_column("–ò–º—è —Ñ–∞–π–ª–∞", min_width=20)
    table.add_column("–†–∞–∑–º–µ—Ä", justify="right", style="green")
    table.add_column("–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è", justify="center", style="blue")

    for i, file_path in enumerate(files, 1):
        size_kb = file_path.stat().st_size / 1024
        size_str = f"{size_kb:.1f} KB" if size_kb < 1024 else f"{size_kb/1024:.1f} MB"
        mod_time = file_path.stat().st_mtime
        import datetime
        mod_date = datetime.datetime.fromtimestamp(mod_time).strftime("%Y-%m-%d %H:%M")
        
        table.add_row(
            str(i),
            file_path.name,
            size_str,
            mod_date
        )

    console.print(table)

    # Get user choice with validation
    try:
        choice = IntPrompt.ask(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞",
            choices=[str(i) for i in range(1, len(files) + 1)],
            show_choices=False
        )
        return str(files[choice - 1])
    except (KeyboardInterrupt, EOFError):
        console.print("\n[yellow]–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω.[/yellow]")
        return None


def debug_coordinate_parser():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å –≤—ã–±–æ—Ä–æ–º proj4 —Å–∏—Å—Ç–µ–º—ã."""
    console.print(Panel(
        "[bold magenta]–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç[/bold magenta]\n"
        "[dim]–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö proj4 —Å–∏—Å—Ç–µ–º[/dim]",
        title="üîß –û—Ç–ª–∞–¥–∫–∞",
        border_style="magenta"
    ))
    
    # –í–∫–ª—é—á–∞–µ–º DEBUG —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ª–∞–¥–∫–∏
    root_logger = logging.getLogger()
    console_handler = None
    original_console_level = None
    for handler in root_logger.handlers:
        if isinstance(handler, logging.StreamHandler):
            console_handler = handler
            original_console_level = handler.level
            handler.setLevel(logging.DEBUG)
            logger.debug("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω DEBUG —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏")
            break

    try:
        while True:
            # Create mode selection menu
            mode_table = Table(title="–†–µ–∂–∏–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞", show_header=False, box=None)
            mode_table.add_column("‚Ññ", style="bold cyan", width=3)
            mode_table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
            
            mode_table.add_row("1", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ)")
            mode_table.add_row("2", "–í–≤–µ—Å—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é proj4 —Å—Ç—Ä–æ–∫—É")
            mode_table.add_row("3", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            
            console.print(mode_table)
            
            mode_choice = Prompt.ask(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞",
                choices=["1", "2", "3"],
                show_choices=False
            )
            
            if mode_choice == "3":
                break
                
            # –í—ã–±–æ—Ä proj4 —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ 2
            selected_transformer = None
            selected_proj4_name = None
            
            if mode_choice == "2":
                console.print(Panel(
                    "[bold cyan]–í–≤–æ–¥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π proj4 —Å—Ç—Ä–æ–∫–∏[/bold cyan]\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ proj4 —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ú–°–ö.\n\n"
                    "[dim]–ü—Ä–∏–º–µ—Ä:[/dim]\n"
                    "[yellow]+proj=tmerc +lat_0=0 +lon_0=130.71666666667 +k=1 +x_0=4300000 +y_0=-16586.442 +ellps=krass +units=m +no_defs[/yellow]",
                    title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ proj4",
                    border_style="cyan"
                ))
                
                while True:
                    try:
                        custom_proj4 = Prompt.ask(
                            "\n[bold]Proj4 —Å—Ç—Ä–æ–∫–∞[/bold]",
                            default="",
                            show_default=False
                        ).strip()
                        
                        if not custom_proj4:
                            console.print("[yellow]–í–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.[/yellow]")
                            continue
                        
                        if custom_proj4.lower() in ["back", "–Ω–∞–∑–∞–¥"]:
                            break
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +proj
                        if not custom_proj4.startswith('+proj'):
                            console.print("[yellow]Proj4 —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '+proj'.[/yellow]")
                            continue
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä
                        selected_transformer = create_transformer(custom_proj4)
                        selected_proj4_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è proj4"
                        
                        display_proj4 = custom_proj4[:60] + "..." if len(custom_proj4) > 60 else custom_proj4
                        console.print(f"[green]‚úì Proj4 —Å—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:[/green] [dim]{display_proj4}[/dim]")
                        break
                        
                    except (KeyboardInterrupt, EOFError):
                        console.print("\n[yellow]–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.[/yellow]")
                        break
                    except Exception as e:
                        console.print(Panel(
                            f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ proj4 —Å—Ç—Ä–æ–∫–∏:[/bold red]\n{e}\n\n"
                            "[yellow]–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é proj4 —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 'back' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.[/yellow]",
                            title="–û—à–∏–±–∫–∞",
                            border_style="red"
                        ))
                        continue
                
                if not selected_transformer:
                    continue
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            mode_text = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π' if mode_choice == '1' else f'–†—É—á–Ω–æ–π ({selected_proj4_name})'
            
            console.print(Panel(
                f"[bold green]–†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞: {mode_text}[/bold green]\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.\n"
                "[dim]–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –≤–≤–µ–¥–∏—Ç–µ 'back' –∏–ª–∏ '–Ω–∞–∑–∞–¥'.[/dim]",
                title="üîç –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç",
                border_style="green"
            ))
            
            while True:
                try:
                    input_string = Prompt.ask("[bold cyan]–°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞[/bold cyan]")
                    
                    if input_string.lower() in ["back", "–Ω–∞–∑–∞–¥"]:
                        break
                    
                    if not input_string.strip():
                        continue
                    
                    logger.info(f"--- –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: '{input_string}' ---")
                    
                    # –ü–∞—Ä—Å–∏–Ω–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                    if mode_choice == "1":
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
                        coords, reason = parse_coordinates(input_string)
                    elif mode_choice == "2":
                        # –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π proj4 —Å–∏—Å—Ç–µ–º–æ–π
                        if (' –º.' in input_string or ', –º.' in input_string or input_string.endswith('–º.')) and '¬∞' not in input_string:
                            coords, reason = process_coordinates(input_string, selected_transformer)
                        else:
                            coords, reason = parse_coordinates(input_string)
                    
                    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ø–∞–Ω–µ–ª–∏
                    if reason:
                        console.print(Panel(
                            f"[bold red]–û—à–∏–±–∫–∞:[/bold red] {reason}",
                            title="‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞",
                            border_style="red"
                        ))
                    elif not coords:
                        console.print(Panel(
                            "[yellow]–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —è–≤–ª—è—é—Ç—Å—è –Ω—É–ª–µ–≤—ã–º–∏.[/yellow]",
                            title="‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞",
                            border_style="yellow"
                        ))
                    else:
                        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                        result_table = Table(title=f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(coords)} –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç", show_header=True, header_style="bold green")
                        result_table.add_column("‚Ññ", style="dim", width=3, justify="center")
                        result_table.add_column("–ò–º—è", style="cyan")
                        result_table.add_column("–î–æ–ª–≥–æ—Ç–∞", style="green", justify="right")
                        result_table.add_column("–®–∏—Ä–æ—Ç–∞", style="green", justify="right")
                        
                        for i, (name, lon, lat) in enumerate(coords, 1):
                            result_table.add_row(str(i), name, f"{lon:.6f}", f"{lat:.6f}")
                        
                        console.print(result_table)
                    
                    console.print()  # Add spacing
                    
                except (KeyboardInterrupt, EOFError):
                    console.print("\n[yellow]–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.[/yellow]")
                    break
    
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏
        if console_handler and original_console_level is not None:
            logger.debug(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏: {logging.getLevelName(original_console_level)}")
            console_handler.setLevel(original_console_level)


def display_welcome():
    """Display welcome screen with application info."""
    console.print(Panel.fit(
        "[bold magenta]–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä Excel –≤ KML[/bold magenta]\n\n"
        "[dim]–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ Excel —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç KML\n"
        "–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö[/dim]",
        title="üó∫Ô∏è Excel to KML Converter (RUDI.RU)",
        border_style="bright_blue",
        padding=(1, 2)
    ))

def show_main_menu() -> str:
    """Display main menu and get user choice."""
    menu_table = Table(show_header=False, box=None, padding=(0, 2))
    menu_table.add_column("‚Ññ", style="bold cyan", width=3)
    menu_table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
    menu_table.add_column("–î–µ–π—Å—Ç–≤–∏–µ", style="dim")
    
    menu_table.add_row("1", "–†–∞–∑–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ KML", "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    menu_table.add_row("2", "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª .xlsx –≤ .kml", "–ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
    menu_table.add_row("3", "–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞")
    menu_table.add_row("4", "–í—ã—Ö–æ–¥", "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")
    
    console.print(Panel(
        menu_table,
        title="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        border_style="cyan"
    ))
    
    return Prompt.ask(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º",
        choices=["1", "2", "3", "4"],
        show_choices=False
    )

def main():
    """Main application entry point."""
    display_welcome()

    while True:
        try:
            user_input = show_main_menu()
        except (KeyboardInterrupt, EOFError):
            console.print("\n[yellow]–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.[/yellow]")
            break

        if user_input == "1":
            console.print(Panel(
                "[bold cyan]–†–µ–∂–∏–º: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ KML[/bold cyan]\n\n"
                "[dim]–≠—Ç–æ—Ç —Ä–µ–∂–∏–º –≤—ã–ø–æ–ª–Ω–∏—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n"
                "1. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º\n"
                "2. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –≤ KML[/dim]",
                title="üîÑ –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
                border_style="cyan"
            ))
            
            input_file = choose_file()
            if not input_file:
                continue

            input_filename = Path(input_file).name
            
            # Display processing info
            info_table = Table(show_header=False, box=None)
            info_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="bold", width=30)
            info_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
            
            info_table.add_row("–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª:", input_filename)
            info_table.add_row("–í—ã—Ö–æ–¥ (XLSX):", config.xlsx_output_dir)
            info_table.add_row("–í—ã—Ö–æ–¥ (KML):", config.kml_output_dir)
            
            console.print(Panel(
                info_table,
                title="‚ÑπÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                border_style="blue"
            ))

            # --- Stage 1: Separation ---
            separation_success = False
            
            console.print("[cyan]üîÑ –≠—Ç–∞–ø 1: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º...[/cyan]")
            
            try:
                # Ensure the separated XLSX output directory exists
                Path(config.xlsx_output_dir).mkdir(parents=True, exist_ok=True)
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö XLSX: {config.xlsx_output_dir}")

                split_excel_file_by_merges(
                    input_path=input_file,
                    output_base_dir=config.xlsx_output_dir,
                    header_rows_count=config.header_rows_count,
                    merge_cols=config.merge_columns
                )
                
                separation_success = True
                
            except Exception as e:
                console.print(Panel(
                    f"[bold red]–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è:[/bold red]\n{e}\n\n"
                    "[dim]–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –æ—Ç–∫—Ä—ã—Ç –≤ Excel –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è.[/dim]",
                    title="‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ 1",
                    border_style="red"
                ))
                logger.exception(f"–û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ 1 (–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ) –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {input_file}")
            
            if separation_success:
                console.print(Panel(
                    f"[bold green]‚úÖ –≠—Ç–∞–ø 1 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ[/bold green]\n\n"
                    f"–§–∞–π–ª '[cyan]{input_filename}[/cyan]' —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω.\n"
                    f"–†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ XLSX —Ñ–∞–π–ª—ã: [blue]{config.xlsx_output_dir}[/blue]",
                    title="üéâ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                    border_style="green"
                ))

            # --- Stage 2: KML Conversion (only if separation was successful) ---
            if separation_success:
                console.print(Panel(
                    "[bold cyan]–≠—Ç–∞–ø 2: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ KML[/bold cyan]\n\n"
                    "[dim]–ü–æ–∏—Å–∫ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç KML...[/dim]",
                    title="üîÑ –≠—Ç–∞–ø 2",
                    border_style="cyan"
                ))
                
                # Find all .xlsx files created by the separator
                separated_files = list(Path(config.xlsx_output_dir).rglob('*.xlsx'))

                if not separated_files:
                    console.print(Panel(
                        f"[yellow]–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ *.xlsx –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ KML –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{config.xlsx_output_dir}' –∏ –µ–µ –ø–æ–¥–ø–∞–ø–∫–∞—Ö.[/yellow]",
                        title="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                        border_style="yellow"
                    ))
                    continue

                console.print(f"[green]‚úì –ù–∞–π–¥–µ–Ω–æ {len(separated_files)} —Ñ–∞–π–ª–æ–≤ .xlsx –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.[/green]")

                # Ensure the KML output base directory exists
                Path(config.kml_output_dir).mkdir(parents=True, exist_ok=True)
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è KML: {config.kml_output_dir}")

                conversion_errors = 0
                anomaly_files_generated = 0

                # --- Temporarily suppress console logging --- START
                root_logger = logging.getLogger()
                console_handler = None
                original_console_level = None
                for handler in root_logger.handlers:
                    # Check if it's the console handler (StreamHandler)
                    # We check the type name because colorlog might be used
                    if isinstance(handler, logging.StreamHandler):
                        console_handler = handler
                        original_console_level = handler.level
                        # Set console to only show errors and above during conversion
                        handler.setLevel(logging.ERROR)
                        logger.debug(
                            f"Temporarily set console log level to {logging.getLevelName(logging.ERROR)}")
                        break
                # --- Temporarily suppress console logging --- END

                try:
                    # --- Use improved Progress with Rich ---
                    with Progress(
                        SpinnerColumn(),
                        TextColumn("[progress.description]{task.description}"),
                        BarColumn(),
                        TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
                        TextColumn("({task.completed}/{task.total} —Ñ–∞–π–ª–æ–≤)"),
                        TimeRemainingColumn(),
                        console=console,
                        transient=False
                    ) as progress:
                        # Add the conversion task
                        task = progress.add_task(
                            "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ KML...", total=len(separated_files))

                        # Loop through files
                        for xlsx_file_path in separated_files:
                            current_file = xlsx_file_path.name
                            
                            # Print filename on separate line to avoid jittering
                            console.print(f"[dim]–û–±—Ä–∞–±–æ—Ç–∫–∞: [cyan]{current_file}[/cyan][/dim]")
                            
                            try:
                                # Determine the relative path from the separated base dir
                                relative_path = xlsx_file_path.relative_to(Path(config.xlsx_output_dir))
                                # Construct the corresponding KML output path
                                kml_file_rel_path = relative_path.with_suffix('.kml')
                                kml_file_abs_path = Path(config.kml_output_dir) / kml_file_rel_path

                                # Ensure the target directory for the KML file exists
                                kml_file_abs_path.parent.mkdir(parents=True, exist_ok=True)

                                # Logger Debug will go to file but not console now
                                logger.debug(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è '{xlsx_file_path}' -> '{kml_file_abs_path}'")

                                # Load workbook (ensure data_only=True)
                                workbook = load_workbook(filename=str(xlsx_file_path), data_only=True)
                                # Convert to KML and capture return value
                                created_anomaly_file = create_kml_from_coordinates(
                                    workbook.active, output_file=str(kml_file_abs_path))
                                if created_anomaly_file:
                                    anomaly_files_generated += 1

                            except Exception as e:
                                conversion_errors += 1
                                # Store error for later display (don't interrupt progress)
                                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è {current_file}: {e}"
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {xlsx_file_path} –≤ KML: {e}", exc_info=True)
                            finally:
                                # Advance progress bar regardless of success/failure for this file
                                progress.advance(task)

                finally:
                    # --- Restore console logging level --- START
                    if console_handler and original_console_level is not None:
                        logger.debug(
                            f"Restored console log level to {logging.getLevelName(original_console_level)}")
                        console_handler.setLevel(original_console_level)
                    # --- Restore console logging level --- END

                # Reporting results (after logging level is restored)
                if conversion_errors == 0:
                    console.print(Panel(
                        f"[bold green]‚úÖ –≠—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ![/bold green]\n\n"
                        f"–í—Å–µ {len(separated_files)} —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ KML.\n"
                        f"KML —Ñ–∞–π–ª—ã: [blue]{config.kml_output_dir}[/blue]",
                        title="üéâ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                        border_style="green"
                    ))
                else:
                    successful_files = len(separated_files) - conversion_errors
                    
                    # Get log file path for error reference
                    log_file_path = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
                    if logger.handlers:
                        for handler in logger.handlers:
                            if hasattr(handler, 'baseFilename'):
                                log_file_path = str(handler.baseFilename)
                                break
                    
                    console.print(Panel(
                        f"[bold yellow]‚ö†Ô∏è –≠—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏[/bold yellow]\n\n"
                        f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ: [green]{successful_files}[/green] —Ñ–∞–π–ª–æ–≤\n"
                        f"–û—à–∏–±–æ–∫: [red]{conversion_errors}[/red]\n\n"
                        f"KML —Ñ–∞–π–ª—ã: [blue]{config.kml_output_dir}[/blue]\n"
                        f"–õ–æ–≥-—Ñ–∞–π–ª: [dim]{log_file_path}[/dim]",
                        title="‚ö†Ô∏è –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏",
                        border_style="yellow"
                    ))

                # Report anomaly files in a separate info panel
                if anomaly_files_generated > 0:
                    console.print(Panel(
                        f"[cyan]üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏:[/cyan] [bold]{anomaly_files_generated}[/bold]\n\n"
                        "[dim]–§–∞–π–ª—ã —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏ (ANO_*.xlsx) —Å–æ–¥–µ—Ä–∂–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.[/dim]",
                        title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π",
                        border_style="cyan"
                    ))
                else:
                    console.print("[dim]‚ÑπÔ∏è –§–∞–π–ª—ã —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏ (ANO_*.xlsx) –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.[/dim]")

        elif user_input == "2":
            console.print(Panel(
                "[bold cyan]–†–µ–∂–∏–º: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ .xlsx –≤ .kml[/bold cyan]\n\n"
                "[dim]–ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ Excel –≤ —Ñ–æ—Ä–º–∞—Ç KML\n"
                "–±–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º.[/dim]",
                title="üöÄ –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
                border_style="cyan"
            ))
            
            file_name = choose_file()
            if not file_name:
                continue

            input_path = Path(file_name)
            
            # Ensure the output directory exists
            Path(config.single_kml_output_dir).mkdir(parents=True, exist_ok=True)

            # Create KML filename in the output directory
            output_filename = Path(config.single_kml_output_dir) / f"{input_path.stem}.kml"
            
            # Display processing info
            info_table = Table(show_header=False, box=None)
            info_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="bold", width=20)
            info_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
            
            info_table.add_row("–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª:", input_path.name)
            info_table.add_row("–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª:", str(output_filename))
            
            console.print(Panel(
                info_table,
                title="‚ÑπÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
                border_style="blue"
            ))

            try:
                with console.status("[cyan]–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ KML...[/cyan]", spinner="dots"):
                    # Ensure reading only data, not formulas
                    workbook = load_workbook(filename=str(input_path), data_only=True)

                    # Convert to KML
                    created_anomaly_file = create_kml_from_coordinates(
                        workbook.active, output_file=str(output_filename))
                
                # Success message
                success_msg = f"[bold green]‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ![/bold green]\n\n"
                success_msg += f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: [cyan]{input_path.name}[/cyan]\n"
                success_msg += f"–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: [blue]{output_filename}[/blue]"
                
                if created_anomaly_file:
                    success_msg += f"\n\n[yellow]üìä –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏[/yellow]"
                
                console.print(Panel(
                    success_msg,
                    title="üéâ –ì–æ—Ç–æ–≤–æ",
                    border_style="green"
                ))
                
            except Exception as e:
                console.print(Panel(
                    f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:[/bold red]\n{e}\n\n"
                    "[dim]–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.[/dim]",
                    title="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
                    border_style="red"
                ))
                logger.exception(f"–û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ 2 –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_name}")

        elif user_input == "3":
            debug_coordinate_parser()

        elif user_input == "4":
            console.print(Panel(
                "[yellow]–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Excel to KML Converter![/yellow]\n\n"
                "[dim]–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.[/dim]",
                title="üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è",
                border_style="yellow"
            ))
            break


if __name__ == '__main__':
    main()
